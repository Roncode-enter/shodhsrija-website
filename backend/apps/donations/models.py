<<<<<<< HEAD

from django.db import models
from django.contrib.auth.models import User
from apps.core.models import TimeStampedModel
import uuid

class Donation(TimeStampedModel):
    """Donation records"""
    DONATION_TYPES = [
        ('one_time', 'One-time Donation'),
        ('monthly', 'Monthly Recurring'),
        ('yearly', 'Yearly Recurring'),
    ]

    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('refunded', 'Refunded'),
    ]

    # Donation Info
    donation_id = models.CharField(max_length=100, unique=True)
    donor = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, 
                             related_name='donations')

    # Anonymous donation fields
    donor_name = models.CharField(max_length=100)
    donor_email = models.EmailField()
    donor_phone = models.CharField(max_length=15, blank=True)
    donor_address = models.TextField(blank=True)

    # Financial Info
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    currency = models.CharField(max_length=3, default='INR')
    donation_type = models.CharField(max_length=15, choices=DONATION_TYPES, default='one_time')

    # Tax Benefits
    pan_number = models.CharField(max_length=10, blank=True, help_text="For 80G tax exemption")
    wants_80g_certificate = models.BooleanField(default=False)

    # Payment Details
    razorpay_order_id = models.CharField(max_length=100, blank=True)
    razorpay_payment_id = models.CharField(max_length=100, blank=True)
    razorpay_signature = models.CharField(max_length=200, blank=True)
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='pending')

    # Purpose
    purpose = models.CharField(max_length=200, blank=True, help_text="Specific purpose of donation")
    message = models.TextField(blank=True, help_text="Message from donor")

    # Recurring donation info
    subscription_id = models.CharField(max_length=100, blank=True)
    next_payment_date = models.DateTimeField(null=True, blank=True)
    is_active_subscription = models.BooleanField(default=False)

    # Admin
    processed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                   related_name='processed_donations')
    admin_notes = models.TextField(blank=True)

    # Timestamps
    completed_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = "Donation"
        verbose_name_plural = "Donations"

    def __str__(self):
        return f"Donation {self.donation_id} - {self.donor_name} - ₹{self.amount}"

    def save(self, *args, **kwargs):
        if not self.donation_id:
            self.donation_id = f"DON_{uuid.uuid4().hex[:12].upper()}"
        super().save(*args, **kwargs)

    @property
    def donor_display_name(self):
        if self.donor:
            return self.donor.get_full_name() or self.donor.username
        return self.donor_name

class DonationCertificate(TimeStampedModel):
    """80G tax exemption certificates"""
    STATUS_CHOICES = [
        ('pending', 'Pending Generation'),
        ('generated', 'Generated'),
        ('sent', 'Sent to Donor'),
    ]

    donation = models.OneToOneField(Donation, on_delete=models.CASCADE, related_name='certificate')
    certificate_number = models.CharField(max_length=100, unique=True)
    financial_year = models.CharField(max_length=9, help_text="e.g., 2024-2025")

    # Certificate details
    issued_date = models.DateField(auto_now_add=True)
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='pending')

    # Legal info
    trust_name = models.CharField(max_length=200, default="ShodhSrija Foundation")
    registration_number = models.CharField(max_length=100, blank=True)
    pan_number = models.CharField(max_length=10, blank=True)

    # Generated by
    generated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        ordering = ['-issued_date']
        verbose_name = "Donation Certificate"
        verbose_name_plural = "Donation Certificates"

    def __str__(self):
        return f"Certificate {self.certificate_number} for {self.donation.donor_display_name}"

    def save(self, *args, **kwargs):
        if not self.certificate_number:
            from django.utils import timezone
            year = timezone.now().year
            count = DonationCertificate.objects.filter(
                issued_date__year=year
            ).count() + 1
            self.certificate_number = f"80G/{year}/{count:04d}"
        super().save(*args, **kwargs)

class DonationCampaign(TimeStampedModel):
    """Fundraising campaigns"""
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('active', 'Active'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    story = models.TextField(help_text="Detailed story for the campaign")

    # Financial targets
    target_amount = models.DecimalField(max_digits=12, decimal_places=2)
    raised_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)

    # Timeline
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='draft')

    # Media
    featured_image = CloudinaryField('campaigns', null=True, blank=True)
    gallery_images = models.JSONField(default=list, help_text="List of image URLs")

    # Settings
    featured = models.BooleanField(default=False)
    allow_anonymous_donations = models.BooleanField(default=True)

    # Relations
    donations = models.ManyToManyField(Donation, blank=True, related_name='campaigns')

    class Meta:
        ordering = ['-start_date']
        verbose_name = "Donation Campaign"
        verbose_name_plural = "Donation Campaigns"

    def __str__(self):
        return self.title

    @property
    def progress_percentage(self):
        if self.target_amount == 0:
            return 0
        return min(100, int((self.raised_amount / self.target_amount) * 100))

    @property
    def is_active(self):
        from django.utils import timezone
        now = timezone.now()
        return (self.status == 'active' and 
                self.start_date <= now <= self.end_date)
=======

from django.db import models
from django.contrib.auth.models import User
from apps.core.models import TimeStampedModel
import uuid

class Donation(TimeStampedModel):
    """Donation records"""
    DONATION_TYPES = [
        ('one_time', 'One-time Donation'),
        ('monthly', 'Monthly Recurring'),
        ('yearly', 'Yearly Recurring'),
    ]

    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('refunded', 'Refunded'),
    ]

    # Donation Info
    donation_id = models.CharField(max_length=100, unique=True)
    donor = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, 
                             related_name='donations')

    # Anonymous donation fields
    donor_name = models.CharField(max_length=100)
    donor_email = models.EmailField()
    donor_phone = models.CharField(max_length=15, blank=True)
    donor_address = models.TextField(blank=True)

    # Financial Info
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    currency = models.CharField(max_length=3, default='INR')
    donation_type = models.CharField(max_length=15, choices=DONATION_TYPES, default='one_time')

    # Tax Benefits
    pan_number = models.CharField(max_length=10, blank=True, help_text="For 80G tax exemption")
    wants_80g_certificate = models.BooleanField(default=False)

    # Payment Details
    razorpay_order_id = models.CharField(max_length=100, blank=True)
    razorpay_payment_id = models.CharField(max_length=100, blank=True)
    razorpay_signature = models.CharField(max_length=200, blank=True)
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='pending')

    # Purpose
    purpose = models.CharField(max_length=200, blank=True, help_text="Specific purpose of donation")
    message = models.TextField(blank=True, help_text="Message from donor")

    # Recurring donation info
    subscription_id = models.CharField(max_length=100, blank=True)
    next_payment_date = models.DateTimeField(null=True, blank=True)
    is_active_subscription = models.BooleanField(default=False)

    # Admin
    processed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True,
                                   related_name='processed_donations')
    admin_notes = models.TextField(blank=True)

    # Timestamps
    completed_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name = "Donation"
        verbose_name_plural = "Donations"

    def __str__(self):
        return f"Donation {self.donation_id} - {self.donor_name} - ₹{self.amount}"

    def save(self, *args, **kwargs):
        if not self.donation_id:
            self.donation_id = f"DON_{uuid.uuid4().hex[:12].upper()}"
        super().save(*args, **kwargs)

    @property
    def donor_display_name(self):
        if self.donor:
            return self.donor.get_full_name() or self.donor.username
        return self.donor_name

class DonationCertificate(TimeStampedModel):
    """80G tax exemption certificates"""
    STATUS_CHOICES = [
        ('pending', 'Pending Generation'),
        ('generated', 'Generated'),
        ('sent', 'Sent to Donor'),
    ]

    donation = models.OneToOneField(Donation, on_delete=models.CASCADE, related_name='certificate')
    certificate_number = models.CharField(max_length=100, unique=True)
    financial_year = models.CharField(max_length=9, help_text="e.g., 2024-2025")

    # Certificate details
    issued_date = models.DateField(auto_now_add=True)
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='pending')

    # Legal info
    trust_name = models.CharField(max_length=200, default="ShodhSrija Foundation")
    registration_number = models.CharField(max_length=100, blank=True)
    pan_number = models.CharField(max_length=10, blank=True)

    # Generated by
    generated_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        ordering = ['-issued_date']
        verbose_name = "Donation Certificate"
        verbose_name_plural = "Donation Certificates"

    def __str__(self):
        return f"Certificate {self.certificate_number} for {self.donation.donor_display_name}"

    def save(self, *args, **kwargs):
        if not self.certificate_number:
            from django.utils import timezone
            year = timezone.now().year
            count = DonationCertificate.objects.filter(
                issued_date__year=year
            ).count() + 1
            self.certificate_number = f"80G/{year}/{count:04d}"
        super().save(*args, **kwargs)

class DonationCampaign(TimeStampedModel):
    """Fundraising campaigns"""
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('active', 'Active'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    story = models.TextField(help_text="Detailed story for the campaign")

    # Financial targets
    target_amount = models.DecimalField(max_digits=12, decimal_places=2)
    raised_amount = models.DecimalField(max_digits=12, decimal_places=2, default=0.00)

    # Timeline
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    status = models.CharField(max_length=15, choices=STATUS_CHOICES, default='draft')

    # Media
    featured_image = CloudinaryField('campaigns', null=True, blank=True)
    gallery_images = models.JSONField(default=list, help_text="List of image URLs")

    # Settings
    featured = models.BooleanField(default=False)
    allow_anonymous_donations = models.BooleanField(default=True)

    # Relations
    donations = models.ManyToManyField(Donation, blank=True, related_name='campaigns')

    class Meta:
        ordering = ['-start_date']
        verbose_name = "Donation Campaign"
        verbose_name_plural = "Donation Campaigns"

    def __str__(self):
        return self.title

    @property
    def progress_percentage(self):
        if self.target_amount == 0:
            return 0
        return min(100, int((self.raised_amount / self.target_amount) * 100))

    @property
    def is_active(self):
        from django.utils import timezone
        now = timezone.now()
        return (self.status == 'active' and 
                self.start_date <= now <= self.end_date)
>>>>>>> e22bff9aeb50cc02bb683c74649041d66e908df0
